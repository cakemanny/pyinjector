name: Tests

on:
  release:
    types: [created]
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test_alpine:
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        container:
          - "python:3.6-alpine"
          - "python:3.7-alpine"
          - "python:3.8-alpine"
          - "python:3.9-alpine"
          - "python:3.10-alpine"
          - "python:3.11-alpine"
    steps:
      - name: Install packages
        # gcc and musl-dev needed for compiling the package
        # git needed for checkout
        # patchelf needed for auditwheel
        run: apk add gcc musl-dev git patchelf
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install dependencies
        # py needed for tox-wheel
        run: pip install tox==4.0.0a9 tox-gh==0.0.3 tox-wheel==1.0.0 py==1.11.0 auditwheel==5.1.2
      - name: Test sdist with tox
        run: python -m tox
      - name: Upload sdist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: .tox/dist/*
      - name: Test wheel with tox
        run: python -m tox --wheel
      - name: Audit wheel
        run: auditwheel repair .tox/dist/* -w audited_wheels
      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: audited_wheels/*

  test_manylinux:
    runs-on: ubuntu-latest
    # Need a relatively modern platform (2014) for the actions themselves to work
    container: quay.io/pypa/manylinux2014_x86_64
    strategy:
      fail-fast: false
      matrix:
        python-version: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39, cp310-cp310, cp311-cp311]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        run: |
          echo "/opt/python/${{ matrix.python-version }}/bin" >> $GITHUB_PATH
          echo $PATH
      - name: Install dependencies
        # py needed for tox-wheel
        run: pip install tox==4.0.0a9 tox-gh==0.0.3 tox-wheel==1.0.0 py==1.11.0
      - name: Test sdist with tox
        run: python -m tox
      - name: Upload ${{ matrix.python-version }} sdist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: .tox/dist/*
      - name: Test wheel with tox
        run: python -m tox --wheel
      - name: Audit ${{ matrix.python-version }} wheel
        run: auditwheel repair .tox/dist/* -w audited_wheels
      - name: Upload ${{ matrix.python-version }} wheel
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: audited_wheels/*

  test_windows:
    runs-on: windows-2019
    env:
      # VIRTUALENV_PIP and VIRTUALENV_WHEEL were added so we have versions that support python3.10
      VIRTUALENV_PIP: 21.3
      VIRTUALENV_WHEEL: 0.37
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11.0-rc.2"]
        arch: [x86, x64]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}
      - name: Install dependencies
        # py needed for tox-wheel
        run: pip install tox==4.0.0a9 tox-gh==0.0.3 tox-wheel==1.0.0 py==1.11.0
      - name: Test sdist with tox
        run: python -m tox
      - name: Upload ${{ matrix.python-version }} sdist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: .tox/dist/*
      - name: Test wheel with tox
        run: python -m tox --wheel
      - name: Upload ${{ matrix.python-version }} wheel
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: .tox/dist/*

  publish:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [test_windows, test_manylinux, test_alpine]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install twine
          python -m twine check dist/*
          python -m twine upload --skip-existing dist/*
